generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  // connect_timeout = 20
}
//=============Usuarios===========
model tb_user {
  id         Int        @id @default(autoincrement()) @map("id_usuario")
  tenantId   Int        @map("id_tenant")
  name       String     @map("nombre") @db.VarChar(100)
  email      String     @unique(map: "email") @map("email") @db.VarChar(100)
  password   String     @map("contrasena") @db.VarChar(255)
  roleId     Int        @map("id_rol")
  createdAt  DateTime   @default(now()) @map("fecha_creacion") @db.Timestamp(0)
  role       tb_role       @relation("UserRole", fields: [roleId], references: [id], onUpdate: Restrict, map: "fk_user_rol")
  tb_tenants tb_tenants @relation(fields: [tenantId], references: [id_tenant], onDelete: Cascade, onUpdate: Restrict, map: "fk_user_tenant")

  @@index([roleId], map: "fk_user_rol")
  @@index([tenantId], map: "fk_user_tenant")
  @@map("tb_users")
}
//=============Roles===========
model tb_role {
  id          Int     @id @default(autoincrement()) @map("id_rol")
  nombre      String  @unique(map: "nombre") @map("nombre") @db.VarChar(50)
  descripcion String? @db.VarChar(255)
  users       tb_user[]  @relation("UserRole")

  @@map("tb_roles")
}
//=============tenants por iglesia===========
model tb_tenants {
  id_tenant      Int       @id @default(autoincrement())
  dpi            String    @unique(map: "dpi") @db.VarChar(20)
  nombre         String    @db.VarChar(100)
  email          String    @unique(map: "email") @db.VarChar(100)
  telefono       String?   @db.VarChar(20)
  fecha_inicio   DateTime? @db.Date
  direccion      String?   @db.VarChar(255)
  fecha_creacion DateTime  @default(now()) @db.Timestamp(0)

  grupos         tb_grupo[]
  miembros       tb_miembros[]
  users       tb_user[]
  limpiezas tb_limpieza[]
  actividades tb_actividad[]
  bautizados tb_bautizados[]
  servidores tb_servidores[]
  familia tb_familias[]
  servicios tb_servicios[]
  asistencia tb_asistencia[]
  nomeclaturas   tb_nomeclatura[]
  operaciones    tb_operacion[]


  @@map("tb_tenants")
}

//=============genero===========
model tb_genero {
  idGenero      Int          @id @default(autoincrement())
  nombregenero  String       @db.VarChar(50)
  fechaCreacion DateTime     @default(now()) @db.Timestamp(0)

  miembros tb_miembros[]

  @@map("tb_genero")
}

//=============estado civil===========
model tb_estadocivil {
  idEstado      Int          @id @default(autoincrement())
  nombreEstado  String       @db.VarChar(50)

  miembros tb_miembros[]

  @@map("tb_estadocivil")
}

//=============grupo===========
model tb_grupo {
  idGrupo       Int          @id @default(autoincrement())
  tenantId      Int
  nombregrupo   String       @db.VarChar(100)
  fechaCreacion DateTime     @default(now()) @db.Timestamp(0)

  tenant       tb_tenants   @relation(fields: [tenantId], references: [id_tenant], map: "fk_grupo_tenant")
  miembros     tb_miembros[]
  miembroGrupo tb_miembrogrupo[]
  actividades tb_actividad[]
  limpiezas    tb_limpieza[]

  @@index([tenantId], map: "fk_grupo_tenant")
  @@map("tb_grupo")
}


//=========tb_bautizados=========
model tb_bautizados {
  idBautizado      Int       @id @default(autoincrement())
  tenantId         Int
  bautizadoEstado  String?   @db.VarChar(5)
  fechaCreacion    DateTime  @default(now()) @db.Timestamp(0)

  // Relaciones
  miembros         tb_miembros[]  // relación inversa 1:N
  tenant           tb_tenants     @relation(fields: [tenantId], references: [id_tenant], map: "fk_bautizado_tenant")

  @@index([tenantId], map: "fk_bautizado_tenant")
  @@map("tb_bautizados")
}

//=========tb_servidores=========
model tb_servidores {
  idServidor      Int       @id @default(autoincrement())
  tenantId        Int
  servidorEstado  String?   @db.VarChar(5)
  fechaCreacion   DateTime  @default(now()) @db.Timestamp(0)

  // Relaciones
  miembros        tb_miembros[]  // relación inversa 1:N
  tenant          tb_tenants     @relation(fields: [tenantId], references: [id_tenant], map: "fk_servidor_tenant")

  @@index([tenantId], map: "fk_servidor_tenant")
  @@map("tb_servidores")
}

//========tb_familia======
model tb_familias {
  idfamilia       Int          @id @default(autoincrement())
  tenantId        Int
  nombreFamilia   String       @db.VarChar(100)
  cantidadfamilia Int?         @default(0)
  fechaCreacion   DateTime     @default(now()) @db.Timestamp(0)

  // Relaciones
  tenant      tb_tenants   @relation(fields: [tenantId], references: [id_tenant], onDelete: Cascade, onUpdate: Restrict, map: "fk_familia_tenant")
  asistencias tb_asistencia[]

  familiaMiembros tb_familia_miembro[] @relation("FamiliaToMiembros")


  @@index([tenantId], map: "fk_familia_tenant")
  @@map("tb_familias")
}
//=========tb_miembros=========
model tb_miembros {
  idMiembro         Int       @id @default(autoincrement())
  tenantId          Int
  dpi               String?   @db.VarChar(20)
  nombre            String    @db.VarChar(100)
  apellido          String    @db.VarChar(100)
  email             String?   @db.VarChar(100)
  telefono          String?   @db.VarChar(20)
  fechanacimiento   DateTime? @db.Date
  idGenero          Int?
  direccion         String?   @db.VarChar(255)
  idEstado          Int?
  fechaLlegada      DateTime? @db.Date
  fechaBautismo     DateTime? @db.Date
  procesosterminado String?   @db.VarChar(255)
  idGrupo           Int?
  legusta           String?   @db.Text
  fechaCreacion     DateTime  @default(now()) @db.Timestamp(0)

  idBautizado Int?
  idServidor  Int?

  // Relaciones
  tenant        tb_tenants      @relation(fields: [tenantId], references: [id_tenant], map: "fk_miembro_tenant")
  genero        tb_genero?      @relation(fields: [idGenero], references: [idGenero], map: "fk_miembro_genero")
  estadoCivil   tb_estadocivil? @relation(fields: [idEstado], references: [idEstado], map: "fk_miembro_estado")
  grupo         tb_grupo?       @relation(fields: [idGrupo], references: [idGrupo], map: "fk_miembro_grupo")
  bautizado     tb_bautizados?  @relation(fields: [idBautizado], references: [idBautizado])
  servidor      tb_servidores?  @relation(fields: [idServidor], references: [idServidor])

  miembroGrupo  tb_miembrogrupo[]
  limpiezas     tb_limpieza[]
  actividades   tb_actividad[]

  familiaMiembros tb_familia_miembro[] @relation("MiembroToFamilias")


  @@index([tenantId], map: "fk_miembro_tenant")
  @@index([idGenero], map: "fk_miembro_genero")
  @@index([idEstado], map: "fk_miembro_estado")
  @@index([idGrupo], map: "fk_miembro_grupo")
  @@map("tb_miembros")
}
//=========tb_familia_miembro========
model tb_familia_miembro {
  idfamilia Int
  idMiembro Int

  familia tb_familias @relation("FamiliaToMiembros", fields: [idfamilia], references: [idfamilia], onDelete: Cascade, map: "fk_familia_miembro_familia")
  miembro  tb_miembros @relation("MiembroToFamilias", fields: [idMiembro], references: [idMiembro], onDelete: Cascade, map: "fk_familia_miembro_miembro")

  @@id([idfamilia, idMiembro])
  @@map("tb_familia_miembro")
}
//=============miembroGrupo muchos a muchos===========
model tb_miembrogrupo {
  idMiembro   Int
  idGrupo     Int
  fechaUnion  DateTime @default(now()) @db.Date

  miembro tb_miembros @relation(fields: [idMiembro], references: [idMiembro], onDelete: Cascade, map: "fk_miembrogrupo_miembro")
  grupo   tb_grupo    @relation(fields: [idGrupo], references: [idGrupo], onDelete: Cascade, map: "fk_miembrogrupo_grupo")

  @@id([idMiembro, idGrupo])
  @@map("tb_miembrogrupo")
}

//=============tb_limpieza===========
model tb_limpieza {
  idLimpieza    Int       @id @default(autoincrement())
  tenantId      Int
  idMiembro     Int?
  idGrupo       Int?
  fechaLimpieza DateTime
  fechaCreacion DateTime  @default(now()) @db.Timestamp(0)

  miembro tb_miembros? @relation(fields: [idMiembro], references: [idMiembro], onDelete: Cascade)
  grupo   tb_grupo?    @relation(fields: [idGrupo], references: [idGrupo], onDelete: Cascade)
  tenant  tb_tenants   @relation(fields: [tenantId], references: [id_tenant], onDelete: Cascade)

  @@map("tb_limpieza")
}

//==================tb_actividades==================
model tb_actividad {
  idActividad   Int          @id @default(autoincrement())
  tenantId      Int
  idMiembro     Int
  idGrupo       Int?
  titulo        String
  descripcion   String?
  fechaActividad DateTime
  fechaCreacion DateTime     @default(now())

  tenant        tb_tenants   @relation(fields: [tenantId], references: [id_tenant], onDelete: Cascade)
  miembro       tb_miembros  @relation(fields: [idMiembro], references: [idMiembro], onDelete: Cascade)
  grupo         tb_grupo?    @relation(fields: [idGrupo], references: [idGrupo], onDelete: SetNull)

  @@map("tb_actividades")
}
//======tb_servicios=======
model tb_servicios {
  idservicio    Int       @id @default(autoincrement())
  tenantId      Int
  horario       String    @db.VarChar(50)
  descripcion   String?   @db.VarChar(150)
  fechaCreacion DateTime  @default(now()) @db.Timestamp(0)

  // Relaciones
  tenant      tb_tenants   @relation(fields: [tenantId], references: [id_tenant], onDelete: Cascade, onUpdate: Restrict, map: "fk_servicio_tenant")
  asistencias tb_asistencia[]


  @@index([tenantId], map: "fk_servicio_tenant")
  @@map("tb_servicios")
}
//==========tb_asistencia=======
model tb_asistencia {
  idasistencia        Int       @id @default(autoincrement())
  tenantId            Int
  idfamilia           Int
  idservicio          Int
  cantidad_asistentes Int
  fechaServicio       DateTime?
  fechaRegistro       DateTime  @default(now()) @db.Timestamp(0)

  // Relaciones
  tenant   tb_tenants   @relation(fields: [tenantId], references: [id_tenant], onDelete: Cascade, onUpdate: Restrict, map: "fk_asistencia_tenant")
  familia  tb_familias  @relation(fields: [idfamilia], references: [idfamilia], onDelete: Cascade, onUpdate: Restrict, map: "fk_asistencia_familia")
  servicio tb_servicios @relation(fields: [idservicio], references: [idservicio], onDelete: Cascade, onUpdate: Restrict, map: "fk_asistencia_servicio")

  @@index([tenantId], map: "fk_asistencia_tenant")
  @@index([idfamilia], map: "fk_asistencia_familia")
  @@index([idservicio], map: "fk_asistencia_servicio")
  @@map("tb_asistencia")
}

//================= tb_nomeclatura =================
model tb_nomeclatura {
  idnomeclatura Int      @id @default(autoincrement())
  tenantId      Int
  codigo        String   @db.VarChar(20)
  nombre        String   @db.VarChar(50)
  tipoIE        String   @db.VarChar(10)
  fechaCreacion DateTime @default(now()) @db.Timestamp(0)

  tenant tb_tenants @relation(fields: [tenantId], references: [id_tenant])

  // RELACIÓN INVERSA
  operaciones tb_operacion[]

  @@map("tb_nomeclatura")
  @@index([tenantId], map: "idx_nomeclatura_tenant")
}

//================= tb_operacion =================
model tb_operacion {
  idoperacion    Int       @id @default(autoincrement())
  tenantId       Int
  idnomeclatura  Int
  fecha          DateTime
  descripcion    String    @db.VarChar(150)
  monto          Decimal   @db.Decimal(12, 2)
  fechaCreacion  DateTime  @default(now()) @db.Timestamp(0)
  isDeleted      Boolean   @default(false)

  tenant      tb_tenants    @relation(fields: [tenantId], references: [id_tenant])
  nomeclatura tb_nomeclatura @relation(fields: [idnomeclatura], references: [idnomeclatura])

  @@map("tb_operacion")
  @@index([tenantId], map: "idx_operacion_tenant")
  @@index([idnomeclatura], map: "idx_operacion_nomeclatura")
}
